#include "config.h"

void main() {

//	소인수를 기억할 배열을 선언하고 모든 배열 요소를 0으로 초기화시킨다.
	int s[20] = { 0 };

//	2보다 작은 숫작가 입력될 때 까지 반복하며 소인수 분해를 실행한다.
	while (true) {

//		소인수 분해할 숫자를 입력받는다.
		int n;
		printf("소인수 분해할 숫자를 입력하세요 : ");
		scanf_s("%d", &n);

//		입력받은 숫자가 2보다 작으면 무한 루프를 탈출한다.
		if (n < 2) {
			break;
		}

		int m = n;
		int c = 0;			// s 배열의 인덱스를 기억하는 변수 => 소인수의 개수
		do {
//			1로는 모든 숫자가 나눠 떨어지므로 계산할 필요없다.
//			소인수 분해는 숫자를 소수의 곱으로 표현하는 것이고 1은 소수가 아니므로 계산할
//			필요없다.
//			소인수 분해를 시작할 변수는 초기치를 2로 시작하면 된다.
			int k = 2;	// 소인수 분해를 실행할 수를 기억하는 변수

//			몇 번 만에 소인수 분해가 될 지 모르기 때문에 무한 루프를 돌린다.
			while (true) {
//				n을 k로 나눠 떨어지면 k가 n의 소인수이므로 무한 루프를 탈출시킨다.
				if (n % k == 0) {
					break;
				}
//				k는 n의 소인수가 아니므로 k 값을 1증가 시킨 후 다시 소인수인가 계산한다.
				k++;
			}

//			계산된 소인수를 배열에 넣어주고 인덱스(소인수의 개수)를 증가시킨다.
			s[c++] = k;
//			다음 소인수를 계산하기 위해서 소인수 분해되고 남은 값(몫)을 다시 n에 넣어준다.
			n /= k;
		} while (n != 1);

//		소인수의 개수가 1개면(c에 저장된 값이 1이면 => 자기 자신으로만 나눠서 떨어진다.) 입력한
//		숫자 n은 소수이므로 소수라고 출력하고 그렇치 않으면 s 배열에 저장된 소인수를 출력한다.
		if (c == 1) {
			printf("%d은 소수 입니다.\n", m);
		}
		else {

			for (int y = 0; y < c - 1; y++) {
				printf("%d * ", s[y]);
			}
			printf("%d = %d\n", s[c - 1], m);

			for (int y = 0; y < c; y++) {
				if (y > 0) {
					printf(" * ");
				}
				printf("%d", s[y]);
			}
			printf(" = %d\n", m);

		}

	}

}